
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000e9e  00000f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  0080014c  0080014c  00000f7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001660  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a63  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bfa  00000000  00000000  000031c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c7  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a65  00000000  00000000  0000463b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 38       	cpi	r26, 0x8B	; 139
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 28 04 	call	0x850	; 0x850 <main>
  9e:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	5a 9a       	sbi	0x0b, 2	; 11
  a8:	00 00       	nop
  aa:	5a 98       	cbi	0x0b, 2	; 11
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	5b 9a       	sbi	0x0b, 3	; 11
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	5b 98       	cbi	0x0b, 3	; 11
  bc:	59 98       	cbi	0x0b, 1	; 11
  be:	3d 9a       	sbi	0x07, 5	; 7
  c0:	3c 9a       	sbi	0x07, 4	; 7
  c2:	3b 9a       	sbi	0x07, 3	; 7
  c4:	3a 9a       	sbi	0x07, 2	; 7
  c6:	42 98       	cbi	0x08, 2	; 8
  c8:	43 98       	cbi	0x08, 3	; 8
  ca:	44 98       	cbi	0x08, 4	; 8
  cc:	45 98       	cbi	0x08, 5	; 8
  ce:	cc 23       	and	r28, r28
  d0:	0c f4       	brge	.+2      	; 0xd4 <lcd_write+0x26>
  d2:	42 9a       	sbi	0x08, 2	; 8
  d4:	c6 fd       	sbrc	r28, 6
  d6:	43 9a       	sbi	0x08, 3	; 8
  d8:	c5 fd       	sbrc	r28, 5
  da:	44 9a       	sbi	0x08, 4	; 8
  dc:	c4 fd       	sbrc	r28, 4
  de:	45 9a       	sbi	0x08, 5	; 8
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e4:	42 98       	cbi	0x08, 2	; 8
  e6:	43 98       	cbi	0x08, 3	; 8
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	45 98       	cbi	0x08, 5	; 8
  ec:	c3 fd       	sbrc	r28, 3
  ee:	42 9a       	sbi	0x08, 2	; 8
  f0:	c2 fd       	sbrc	r28, 2
  f2:	43 9a       	sbi	0x08, 3	; 8
  f4:	c1 fd       	sbrc	r28, 1
  f6:	44 9a       	sbi	0x08, 4	; 8
  f8:	c0 fd       	sbrc	r28, 0
  fa:	45 9a       	sbi	0x08, 5	; 8
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 100:	45 9a       	sbi	0x08, 5	; 8
 102:	44 9a       	sbi	0x08, 4	; 8
 104:	43 9a       	sbi	0x08, 3	; 8
 106:	42 9a       	sbi	0x08, 2	; 8
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_read>:
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_read+0x8>
 110:	5b 9a       	sbi	0x0b, 3	; 11
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_read+0xa>
 114:	5b 98       	cbi	0x0b, 3	; 11
 116:	59 9a       	sbi	0x0b, 1	; 11
 118:	3d 98       	cbi	0x07, 5	; 7
 11a:	3c 98       	cbi	0x07, 4	; 7
 11c:	3b 98       	cbi	0x07, 3	; 7
 11e:	3a 98       	cbi	0x07, 2	; 7
 120:	5a 9a       	sbi	0x0b, 2	; 11
 122:	00 00       	nop
 124:	35 9b       	sbis	0x06, 5	; 6
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_read+0x20>
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	34 99       	sbic	0x06, 4	; 6
 130:	80 62       	ori	r24, 0x20	; 32
 132:	33 99       	sbic	0x06, 3	; 6
 134:	80 64       	ori	r24, 0x40	; 64
 136:	32 99       	sbic	0x06, 2	; 6
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	5a 98       	cbi	0x0b, 2	; 11
 13c:	00 00       	nop
 13e:	5a 9a       	sbi	0x0b, 2	; 11
 140:	00 00       	nop
 142:	35 99       	sbic	0x06, 5	; 6
 144:	81 60       	ori	r24, 0x01	; 1
 146:	34 99       	sbic	0x06, 4	; 6
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	33 99       	sbic	0x06, 3	; 6
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	32 99       	sbic	0x06, 2	; 6
 150:	88 60       	ori	r24, 0x08	; 8
 152:	5a 98       	cbi	0x0b, 2	; 11
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 15c:	88 23       	and	r24, r24
 15e:	dc f3       	brlt	.-10     	; 0x156 <lcd_waitbusy>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_waitbusy+0xc>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_waitbusy+0xe>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 16a:	08 95       	ret

0000016c <lcd_command>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_gotoxy>:
 180:	61 11       	cpse	r22, r1
 182:	04 c0       	rjmp	.+8      	; 0x18c <lcd_gotoxy+0xc>
 184:	80 58       	subi	r24, 0x80	; 128
 186:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 18a:	08 95       	ret
 18c:	80 54       	subi	r24, 0x40	; 64
 18e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 192:	08 95       	ret

00000194 <lcd_clrscr>:
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 19a:	08 95       	ret

0000019c <lcd_putc>:
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
 1a0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 1a4:	ca 30       	cpi	r28, 0x0A	; 10
 1a6:	49 f4       	brne	.+18     	; 0x1ba <lcd_putc+0x1e>
 1a8:	80 34       	cpi	r24, 0x40	; 64
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <lcd_putc+0x14>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <lcd_putc+0x16>
 1b0:	80 e4       	ldi	r24, 0x40	; 64
 1b2:	80 58       	subi	r24, 0x80	; 128
 1b4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <lcd_putc+0x26>
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ec 01       	movw	r28, r24
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <lcd_puts+0x1a>
 1d6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
 1da:	89 91       	ld	r24, Y+
 1dc:	81 11       	cpse	r24, r1
 1de:	fb cf       	rjmp	.-10     	; 0x1d6 <lcd_puts+0x10>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ea:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ec:	51 9a       	sbi	0x0a, 1	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ee:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f0:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1f2:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1f4:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1f6:	3a 9a       	sbi	0x07, 2	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0x16>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_init+0x1c>
 202:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 204:	44 9a       	sbi	0x08, 4	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 206:	45 9a       	sbi	0x08, 5	; 8
    lcd_e_toggle();
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 20c:	81 ee       	ldi	r24, 0xE1	; 225
 20e:	94 e0       	ldi	r25, 0x04	; 4
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x2a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x30>
 216:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 21c:	95 e1       	ldi	r25, 0x15	; 21
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x38>
 222:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 224:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 228:	85 e1       	ldi	r24, 0x15	; 21
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x44>
 22e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 230:	45 98       	cbi	0x08, 5	; 8
    lcd_e_toggle();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 236:	95 e1       	ldi	r25, 0x15	; 21
 238:	9a 95       	dec	r25
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x52>
 23c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 23e:	88 e2       	ldi	r24, 0x28	; 40
 240:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 24a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 254:	8c 2f       	mov	r24, r28
 256:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>

}/* lcd_init */
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <uart_RX_init>:
State current_state;
volatile Count_State current_count; 

void uart_RX_init(uint16_t baud)
{
	UCSR0B |= (1<<RXEN0); //Turn on RX pin
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 61       	ori	r24, 0x10	; 16
 266:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); // UCSRC = 0000 00110 Asynch,No parity, 1 stop bit, 8 bit data, falling clock edge
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	int UBRR_calc = (F_CPU / (16*baud)) - 1 ;   //max baud rate 65K
	UBRR_calc = 250;
	UBRR0L=UBRR_calc;
 26e:	8a ef       	ldi	r24, 0xFA	; 250
 270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H=UBRR_calc>>8;
 274:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
		   //set baud rate
	
	DDRD &= ~(1<<PORTD0);	    //set RX as input
 278:	50 98       	cbi	0x0a, 0	; 10
 27a:	08 95       	ret

0000027c <USART_Receive>:
}

unsigned char USART_Receive( void ){
	
	/* wait to receive data unless switch button is pressed */
	while(!(UCSR0A & (1<<RXC0))){
 27c:	e0 ec       	ldi	r30, 0xC0	; 192
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	06 c0       	rjmp	.+12     	; 0x28e <USART_Receive+0x12>
		PORTD |= (1<<PORTD4); // led on; ready to receive data
 282:	5c 9a       	sbi	0x0b, 4	; 11
		if(!(PINC & (1<<PORTC1))){
 284:	31 99       	sbic	0x06, 1	; 6
 286:	03 c0       	rjmp	.+6      	; 0x28e <USART_Receive+0x12>
			PORTD &= ~(1<<PORTD4); // led on; ready to receive data
 288:	5c 98       	cbi	0x0b, 4	; 11
			return '~';
 28a:	8e e7       	ldi	r24, 0x7E	; 126
 28c:	08 95       	ret
}

unsigned char USART_Receive( void ){
	
	/* wait to receive data unless switch button is pressed */
	while(!(UCSR0A & (1<<RXC0))){
 28e:	80 81       	ld	r24, Z
 290:	88 23       	and	r24, r24
 292:	bc f7       	brge	.-18     	; 0x282 <USART_Receive+0x6>
			PORTD &= ~(1<<PORTD4); // led on; ready to receive data
			return '~';
		}
	} 
			
	unsigned char received = UDR0; // save the recived data
 294:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	PORTD &= ~(1<<PORTD4);// led off;
 298:	5c 98       	cbi	0x0b, 4	; 11
	return received; 
}
 29a:	08 95       	ret

0000029c <timer_reset>:

void timer_reset(){
	time.milliseconds = 0;
 29c:	e5 e5       	ldi	r30, 0x55	; 85
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	10 82       	st	Z, r1
	time.seconds = 0;
 2a2:	11 82       	std	Z+1, r1	; 0x01
	time.minutes = 0;
 2a4:	12 82       	std	Z+2, r1	; 0x02
	time.hours = 0;
 2a6:	13 82       	std	Z+3, r1	; 0x03
	
	sprintf(string_buffer, "00:00:00:00"); // create string for output
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	e0 e0       	ldi	r30, 0x00	; 0
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	a9 e5       	ldi	r26, 0x59	; 89
 2b0:	b1 e0       	ldi	r27, 0x01	; 1
 2b2:	01 90       	ld	r0, Z+
 2b4:	0d 92       	st	X+, r0
 2b6:	8a 95       	dec	r24
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <timer_reset+0x16>
	lcd_gotoxy(0,0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
	lcd_puts(string_buffer);
 2c2:	89 e5       	ldi	r24, 0x59	; 89
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 2ca:	08 95       	ret

000002cc <lcd_print_time>:
}

/*
	Print the time on the lcd in its proper collum
*/
void lcd_print_time(int collum, uint8_t time_unit){
 2cc:	cf 93       	push	r28
 2ce:	c6 2f       	mov	r28, r22
	lcd_gotoxy(collum, 0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
	if(time_unit < 10){
 2d6:	ca 30       	cpi	r28, 0x0A	; 10
 2d8:	98 f4       	brcc	.+38     	; 0x300 <lcd_print_time+0x34>
		sprintf(string_buffer1, "0%u", time_unit ); // create string for output with 1 digit value
 2da:	1f 92       	push	r1
 2dc:	cf 93       	push	r28
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	9f 93       	push	r25
 2e4:	8f 93       	push	r24
 2e6:	8c e4       	ldi	r24, 0x4C	; 76
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	9f 93       	push	r25
 2ec:	8f 93       	push	r24
 2ee:	0e 94 63 04 	call	0x8c6	; 0x8c6 <sprintf>
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	12 c0       	rjmp	.+36     	; 0x324 <lcd_print_time+0x58>
	}
	else{
		sprintf(string_buffer1, "%u", time_unit ); // create string for output
 300:	1f 92       	push	r1
 302:	cf 93       	push	r28
 304:	8d e0       	ldi	r24, 0x0D	; 13
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	9f 93       	push	r25
 30a:	8f 93       	push	r24
 30c:	8c e4       	ldi	r24, 0x4C	; 76
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
 314:	0e 94 63 04 	call	0x8c6	; 0x8c6 <sprintf>
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
	}
	lcd_puts(string_buffer1); // print to lcd screen
 324:	8c e4       	ldi	r24, 0x4C	; 76
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
}
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <__vector_11>:

/* increment time routine */
ISR(TIMER1_COMPA_vect, ISR_BLOCK) {
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
		//} else {
		//time.milliseconds++;
		//lcd_print_time(COLLUM_MILISEC, time.milliseconds);
	//}
	
		switch (current_count) {
 356:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <current_count>
 35a:	88 23       	and	r24, r24
 35c:	21 f0       	breq	.+8      	; 0x366 <__vector_11+0x36>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	09 f4       	brne	.+2      	; 0x364 <__vector_11+0x34>
 362:	56 c0       	rjmp	.+172    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 364:	ab c0       	rjmp	.+342    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			case UP:
			if(time.milliseconds == 99){
 366:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <time>
 36a:	83 36       	cpi	r24, 0x63	; 99
 36c:	09 f0       	breq	.+2      	; 0x370 <__vector_11+0x40>
 36e:	45 c0       	rjmp	.+138    	; 0x3fa <__vector_11+0xca>
				time.milliseconds = 0;
 370:	c5 e5       	ldi	r28, 0x55	; 85
 372:	d1 e0       	ldi	r29, 0x01	; 1
 374:	18 82       	st	Y, r1
				lcd_print_time(COLLUM_MILISEC, time.milliseconds);
 376:	68 81       	ld	r22, Y
 378:	89 e0       	ldi	r24, 0x09	; 9
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
				if(time.seconds == 59){
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	8b 33       	cpi	r24, 0x3B	; 59
 384:	79 f5       	brne	.+94     	; 0x3e4 <__vector_11+0xb4>
					time.seconds = 0;
 386:	19 82       	std	Y+1, r1	; 0x01
					lcd_print_time(COLLUM_SECOND, time.seconds);
 388:	69 81       	ldd	r22, Y+1	; 0x01
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
					if(time.minutes == 59){
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	8b 33       	cpi	r24, 0x3B	; 59
 396:	d9 f4       	brne	.+54     	; 0x3ce <__vector_11+0x9e>
						time.minutes = 0;
 398:	1a 82       	std	Y+2, r1	; 0x02
						lcd_print_time(COLLUM_MINUTE, time.minutes);
 39a:	6a 81       	ldd	r22, Y+2	; 0x02
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
						if(time.hours == 23){
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	87 31       	cpi	r24, 0x17	; 23
 3a8:	39 f4       	brne	.+14     	; 0x3b8 <__vector_11+0x88>
							time.hours = 0;
 3aa:	1b 82       	std	Y+3, r1	; 0x03
							lcd_print_time(COLLUM_HOUR,time.hours);
 3ac:	6b 81       	ldd	r22, Y+3	; 0x03
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 3b6:	82 c0       	rjmp	.+260    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
							} else {
							time.hours++;
 3b8:	e5 e5       	ldi	r30, 0x55	; 85
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	83 81       	ldd	r24, Z+3	; 0x03
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	83 83       	std	Z+3, r24	; 0x03
							lcd_print_time(COLLUM_HOUR,time.hours);
 3c2:	63 81       	ldd	r22, Z+3	; 0x03
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 3cc:	77 c0       	rjmp	.+238    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
						}
						} else {
						time.minutes++;
 3ce:	e5 e5       	ldi	r30, 0x55	; 85
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	82 81       	ldd	r24, Z+2	; 0x02
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	82 83       	std	Z+2, r24	; 0x02
						lcd_print_time(COLLUM_MINUTE, time.minutes);
 3d8:	62 81       	ldd	r22, Z+2	; 0x02
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 3e2:	6c c0       	rjmp	.+216    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
					}
					} else{
					time.seconds++;
 3e4:	e5 e5       	ldi	r30, 0x55	; 85
 3e6:	f1 e0       	ldi	r31, 0x01	; 1
 3e8:	81 81       	ldd	r24, Z+1	; 0x01
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	81 83       	std	Z+1, r24	; 0x01
					lcd_print_time(COLLUM_SECOND, time.seconds);
 3ee:	61 81       	ldd	r22, Z+1	; 0x01
 3f0:	86 e0       	ldi	r24, 0x06	; 6
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 3f8:	61 c0       	rjmp	.+194    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				}
				} else {
				time.milliseconds++;
 3fa:	e5 e5       	ldi	r30, 0x55	; 85
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	80 81       	ld	r24, Z
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	80 83       	st	Z, r24
				lcd_print_time(COLLUM_MILISEC, time.milliseconds);
 404:	60 81       	ld	r22, Z
 406:	89 e0       	ldi	r24, 0x09	; 9
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 40e:	56 c0       	rjmp	.+172    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			}
			break;
			
			case DOWN:
			if(time.milliseconds == 0){
 410:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <time>
 414:	81 11       	cpse	r24, r1
 416:	48 c0       	rjmp	.+144    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>

				if(time.seconds == 0){
 418:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <time+0x1>
 41c:	81 11       	cpse	r24, r1
 41e:	32 c0       	rjmp	.+100    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>

					if(time.minutes == 0){
 420:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time+0x2>
 424:	81 11       	cpse	r24, r1
 426:	1c c0       	rjmp	.+56     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

						if (time.hours == 0) {
 428:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <time+0x3>
 42c:	81 11       	cpse	r24, r1
 42e:	07 c0       	rjmp	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
							lcd_print_time(COLLUM_HOUR,time.hours);
 430:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <time+0x3>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 43c:	3f c0       	rjmp	.+126    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
							/* don't do anything and display 00:00:00:00 */
						} else {
							time.minutes == 59;
 43e:	c5 e5       	ldi	r28, 0x55	; 85
 440:	d1 e0       	ldi	r29, 0x01	; 1
 442:	8a 81       	ldd	r24, Y+2	; 0x02
							lcd_print_time(COLLUM_MINUTE, time.minutes);
 444:	6a 81       	ldd	r22, Y+2	; 0x02
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
							time.hours--;
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	81 50       	subi	r24, 0x01	; 1
 452:	8b 83       	std	Y+3, r24	; 0x03
							lcd_print_time(COLLUM_HOUR,time.hours);
 454:	6b 81       	ldd	r22, Y+3	; 0x03
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 45e:	2e c0       	rjmp	.+92     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
						}
					} else {
						time.seconds = 59;
 460:	c5 e5       	ldi	r28, 0x55	; 85
 462:	d1 e0       	ldi	r29, 0x01	; 1
 464:	8b e3       	ldi	r24, 0x3B	; 59
 466:	89 83       	std	Y+1, r24	; 0x01
						lcd_print_time(COLLUM_SECOND, time.seconds);
 468:	69 81       	ldd	r22, Y+1	; 0x01
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
						time.minutes--;
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	81 50       	subi	r24, 0x01	; 1
 476:	8a 83       	std	Y+2, r24	; 0x02
						lcd_print_time(COLLUM_MINUTE, time.minutes);
 478:	6a 81       	ldd	r22, Y+2	; 0x02
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 482:	1c c0       	rjmp	.+56     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
					}
				} else {
					time.milliseconds = 99;
 484:	c5 e5       	ldi	r28, 0x55	; 85
 486:	d1 e0       	ldi	r29, 0x01	; 1
 488:	83 e6       	ldi	r24, 0x63	; 99
 48a:	88 83       	st	Y, r24
					lcd_print_time(COLLUM_MILISEC, time.milliseconds);
 48c:	68 81       	ld	r22, Y
 48e:	89 e0       	ldi	r24, 0x09	; 9
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
					time.seconds--;
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	81 50       	subi	r24, 0x01	; 1
 49a:	89 83       	std	Y+1, r24	; 0x01
					lcd_print_time(COLLUM_SECOND, time.seconds);
 49c:	69 81       	ldd	r22, Y+1	; 0x01
 49e:	86 e0       	ldi	r24, 0x06	; 6
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
 4a6:	0a c0       	rjmp	.+20     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				}
			} else{
				time.milliseconds--;
 4a8:	e5 e5       	ldi	r30, 0x55	; 85
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	80 81       	ld	r24, Z
 4ae:	81 50       	subi	r24, 0x01	; 1
 4b0:	80 83       	st	Z, r24
				lcd_print_time(COLLUM_MILISEC, time.milliseconds);
 4b2:	60 81       	ld	r22, Z
 4b4:	89 e0       	ldi	r24, 0x09	; 9
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
			}
		break;
	}	
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <convertTime>:

void convertTime(){
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
	if (time.seconds >= 60){
 4e6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <time+0x1>
 4ea:	8c 33       	cpi	r24, 0x3C	; 60
 4ec:	40 f0       	brcs	.+16     	; 0x4fe <convertTime+0x1c>
		time.seconds -= 60;
 4ee:	e5 e5       	ldi	r30, 0x55	; 85
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	81 81       	ldd	r24, Z+1	; 0x01
 4f4:	8c 53       	subi	r24, 0x3C	; 60
 4f6:	81 83       	std	Z+1, r24	; 0x01
		time.minutes += 1;
 4f8:	82 81       	ldd	r24, Z+2	; 0x02
 4fa:	8f 5f       	subi	r24, 0xFF	; 255
 4fc:	82 83       	std	Z+2, r24	; 0x02
	}
	if (time.minutes >= 60){
 4fe:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time+0x2>
 502:	8c 33       	cpi	r24, 0x3C	; 60
 504:	40 f0       	brcs	.+16     	; 0x516 <convertTime+0x34>
		time.minutes -= 60;
 506:	e5 e5       	ldi	r30, 0x55	; 85
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	82 81       	ldd	r24, Z+2	; 0x02
 50c:	8c 53       	subi	r24, 0x3C	; 60
 50e:	82 83       	std	Z+2, r24	; 0x02
		time.hours +=1;
 510:	83 81       	ldd	r24, Z+3	; 0x03
 512:	8f 5f       	subi	r24, 0xFF	; 255
 514:	83 83       	std	Z+3, r24	; 0x03
	}
	if (time.hours >= 24){
 516:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <time+0x3>
 51a:	88 31       	cpi	r24, 0x18	; 24
 51c:	70 f0       	brcs	.+28     	; 0x53a <convertTime+0x58>
		time.hours = time.hours%24;
 51e:	e5 e5       	ldi	r30, 0x55	; 85
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	8b ea       	ldi	r24, 0xAB	; 171
 526:	98 9f       	mul	r25, r24
 528:	81 2d       	mov	r24, r1
 52a:	11 24       	eor	r1, r1
 52c:	82 95       	swap	r24
 52e:	8f 70       	andi	r24, 0x0F	; 15
 530:	28 e1       	ldi	r18, 0x18	; 24
 532:	82 9f       	mul	r24, r18
 534:	90 19       	sub	r25, r0
 536:	11 24       	eor	r1, r1
 538:	93 83       	std	Z+3, r25	; 0x03
	}
	lcd_print_time(COLLUM_MILISEC, time.milliseconds);
 53a:	c5 e5       	ldi	r28, 0x55	; 85
 53c:	d1 e0       	ldi	r29, 0x01	; 1
 53e:	68 81       	ld	r22, Y
 540:	89 e0       	ldi	r24, 0x09	; 9
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
	lcd_print_time(COLLUM_SECOND, time.seconds);
 548:	69 81       	ldd	r22, Y+1	; 0x01
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
	lcd_print_time(COLLUM_MINUTE, time.minutes);
 552:	6a 81       	ldd	r22, Y+2	; 0x02
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
	lcd_print_time(COLLUM_HOUR,time.hours);
 55c:	6b 81       	ldd	r22, Y+3	; 0x03
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_print_time>
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <countSelect>:

void countSelect(){
	unsigned char count_input;
	sprintf(string_buffer, "select 1 or 2 ");
 56c:	8f e0       	ldi	r24, 0x0F	; 15
 56e:	e0 e1       	ldi	r30, 0x10	; 16
 570:	f1 e0       	ldi	r31, 0x01	; 1
 572:	a9 e5       	ldi	r26, 0x59	; 89
 574:	b1 e0       	ldi	r27, 0x01	; 1
 576:	01 90       	ld	r0, Z+
 578:	0d 92       	st	X+, r0
 57a:	8a 95       	dec	r24
 57c:	e1 f7       	brne	.-8      	; 0x576 <countSelect+0xa>
	lcd_gotoxy(0,0);
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
	lcd_puts(string_buffer);
 586:	89 e5       	ldi	r24, 0x59	; 89
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	while(1){
		count_input = USART_Receive();
 58e:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Receive>
		if (count_input == '1'){
 592:	81 33       	cpi	r24, 0x31	; 49
 594:	19 f4       	brne	.+6      	; 0x59c <countSelect+0x30>
			current_count = UP;
 596:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <current_count>
			return;
 59a:	08 95       	ret
		}
		else if (count_input == '2'){
 59c:	82 33       	cpi	r24, 0x32	; 50
 59e:	b9 f7       	brne	.-18     	; 0x58e <countSelect+0x22>
			current_count = DOWN;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <current_count>
 5a6:	08 95       	ret

000005a8 <change_state>:
			return;
		}
	}
}

void change_state(State state){
 5a8:	6f 92       	push	r6
 5aa:	7f 92       	push	r7
 5ac:	8f 92       	push	r8
 5ae:	9f 92       	push	r9
 5b0:	af 92       	push	r10
 5b2:	bf 92       	push	r11
 5b4:	cf 92       	push	r12
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	60 97       	sbiw	r28, 0x10	; 16
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
	
	/* define state machine with 3 states: PAUSED, RUNNING, and PROGRAM (entered if # key is pressed) */
	switch (state) {
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	09 f4       	brne	.+2      	; 0x5da <change_state+0x32>
 5d8:	46 c0       	rjmp	.+140    	; 0x666 <change_state+0xbe>
 5da:	18 f0       	brcs	.+6      	; 0x5e2 <change_state+0x3a>
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	f9 f0       	breq	.+62     	; 0x61e <change_state+0x76>
 5e0:	22 c1       	rjmp	.+580    	; 0x826 <change_state+0x27e>
		case PAUSED:
			current_state = PAUSED;
 5e2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <current_state>
			UCSR0B |= (1<<RXEN0); //enable RX receiving while paused
 5e6:	e1 ec       	ldi	r30, 0xC1	; 193
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	80 61       	ori	r24, 0x10	; 16
 5ee:	80 83       	st	Z, r24
			/* stop time and print paused */
			TIMSK1 &= ~(1 << OCIE1A);						// disable interrupts to stop timer counting
 5f0:	ef e6       	ldi	r30, 0x6F	; 111
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	8d 7f       	andi	r24, 0xFD	; 253
 5f8:	80 83       	st	Z, r24
			sprintf (string_buffer, "Paused");
 5fa:	87 e0       	ldi	r24, 0x07	; 7
 5fc:	ef e1       	ldi	r30, 0x1F	; 31
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	a9 e5       	ldi	r26, 0x59	; 89
 602:	b1 e0       	ldi	r27, 0x01	; 1
 604:	01 90       	ld	r0, Z+
 606:	0d 92       	st	X+, r0
 608:	8a 95       	dec	r24
 60a:	e1 f7       	brne	.-8      	; 0x604 <change_state+0x5c>
			lcd_gotoxy(0,1);
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
			lcd_puts(string_buffer);
 614:	89 e5       	ldi	r24, 0x59	; 89
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
			break;
 61c:	04 c1       	rjmp	.+520    	; 0x826 <change_state+0x27e>
				
		case RUNNING:
			current_state = RUNNING;
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <current_state>
			UCSR0B &= ~(1<<RXEN0); //Disable RX receiving while running
 624:	e1 ec       	ldi	r30, 0xC1	; 193
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	8f 7e       	andi	r24, 0xEF	; 239
 62c:	80 83       	st	Z, r24
			/* start timer and print nothing below*/
			TIMSK1 &= ~(1 << OCIE1A);					// disable timer interrupts to print to display
 62e:	0f e6       	ldi	r16, 0x6F	; 111
 630:	10 e0       	ldi	r17, 0x00	; 0
 632:	d8 01       	movw	r26, r16
 634:	8c 91       	ld	r24, X
 636:	8d 7f       	andi	r24, 0xFD	; 253
 638:	8c 93       	st	X, r24
			sprintf (string_buffer, "      ");
 63a:	87 e0       	ldi	r24, 0x07	; 7
 63c:	e0 e3       	ldi	r30, 0x30	; 48
 63e:	f1 e0       	ldi	r31, 0x01	; 1
 640:	a9 e5       	ldi	r26, 0x59	; 89
 642:	b1 e0       	ldi	r27, 0x01	; 1
 644:	01 90       	ld	r0, Z+
 646:	0d 92       	st	X+, r0
 648:	8a 95       	dec	r24
 64a:	e1 f7       	brne	.-8      	; 0x644 <change_state+0x9c>
			lcd_gotoxy(0,1);
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
			lcd_puts(string_buffer);
 654:	89 e5       	ldi	r24, 0x59	; 89
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
			TIMSK1 |= (1 << OCIE1A);					// enable timer interrupts
 65c:	f8 01       	movw	r30, r16
 65e:	80 81       	ld	r24, Z
 660:	82 60       	ori	r24, 0x02	; 2
 662:	80 83       	st	Z, r24
			break;
 664:	e0 c0       	rjmp	.+448    	; 0x826 <change_state+0x27e>
				
		case PROGRAM:
			current_state = PROGRAM;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <current_state>
			/* disable switch button */
			PORTC &= ~(1 << PORTC1);					// disable internal pull up for switch button
 66c:	41 98       	cbi	0x08, 1	; 8
			countSelect();
 66e:	0e 94 b6 02 	call	0x56c	; 0x56c <countSelect>
			/* display blank state to indicate programming */
			sprintf(string_buffer, "  :  :  :       ");		
 672:	81 e1       	ldi	r24, 0x11	; 17
 674:	e6 e2       	ldi	r30, 0x26	; 38
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	a9 e5       	ldi	r26, 0x59	; 89
 67a:	b1 e0       	ldi	r27, 0x01	; 1
 67c:	01 90       	ld	r0, Z+
 67e:	0d 92       	st	X+, r0
 680:	8a 95       	dec	r24
 682:	e1 f7       	brne	.-8      	; 0x67c <change_state+0xd4>
			lcd_gotoxy(0,0);
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
			lcd_puts(string_buffer);
 68c:	89 e5       	ldi	r24, 0x59	; 89
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
			/* record data being inputted */
			int input_time[] = {0,0,0,0,0,0,0,0};
 694:	fe 01       	movw	r30, r28
 696:	31 96       	adiw	r30, 0x01	; 1
 698:	80 e1       	ldi	r24, 0x10	; 16
 69a:	df 01       	movw	r26, r30
 69c:	1d 92       	st	X+, r1
 69e:	8a 95       	dec	r24
 6a0:	e9 f7       	brne	.-6      	; 0x69c <change_state+0xf4>
			int receivedBytes = 0;
 6a2:	e1 2c       	mov	r14, r1
 6a4:	f1 2c       	mov	r15, r1
					receivedBytes++;
				}
				else if(input == '*' && receivedBytes != 0){
					/* init starting time */
					
					time.milliseconds = input_time[1]*10 + input_time[0];
 6a6:	0f 2e       	mov	r0, r31
 6a8:	f5 e5       	ldi	r31, 0x55	; 85
 6aa:	6f 2e       	mov	r6, r31
 6ac:	f1 e0       	ldi	r31, 0x01	; 1
 6ae:	7f 2e       	mov	r7, r31
 6b0:	f0 2d       	mov	r31, r0
					} 
					for(int i =receivedBytes; i>0; i--){
						input_time[i] = input_time[i-1];
					}
					input_time[0] = input - '0';
					sprintf(string_buffer, "%d%d:%d%d:%d%d:%d%d", input_time[7],input_time[6],input_time[5],input_time[4],input_time[3],input_time[2],input_time[1],input_time[0]); // create string for output
 6b2:	0f 2e       	mov	r0, r31
 6b4:	f7 e3       	ldi	r31, 0x37	; 55
 6b6:	8f 2e       	mov	r8, r31
 6b8:	f1 e0       	ldi	r31, 0x01	; 1
 6ba:	9f 2e       	mov	r9, r31
 6bc:	f0 2d       	mov	r31, r0
 6be:	0f 2e       	mov	r0, r31
 6c0:	f9 e5       	ldi	r31, 0x59	; 89
 6c2:	cf 2e       	mov	r12, r31
 6c4:	f1 e0       	ldi	r31, 0x01	; 1
 6c6:	df 2e       	mov	r13, r31
 6c8:	f0 2d       	mov	r31, r0
 6ca:	8f 01       	movw	r16, r30
 6cc:	5e 01       	movw	r10, r28
 6ce:	b1 e1       	ldi	r27, 0x11	; 17
 6d0:	ab 0e       	add	r10, r27
 6d2:	b1 1c       	adc	r11, r1
			lcd_gotoxy(0,0);
			lcd_puts(string_buffer);
			/* record data being inputted */
			int input_time[] = {0,0,0,0,0,0,0,0};
			int receivedBytes = 0;
			while (current_state == PROGRAM){
 6d4:	a3 c0       	rjmp	.+326    	; 0x81c <change_state+0x274>
				input = USART_Receive();
 6d6:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Receive>
 6da:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <input>
				if(input >= '0' && input <= '9'){
 6de:	90 ed       	ldi	r25, 0xD0	; 208
 6e0:	98 0f       	add	r25, r24
 6e2:	9a 30       	cpi	r25, 0x0A	; 10
 6e4:	08 f0       	brcs	.+2      	; 0x6e8 <change_state+0x140>
 6e6:	6a c0       	rjmp	.+212    	; 0x7bc <change_state+0x214>
					if(receivedBytes == 8){
 6e8:	e8 e0       	ldi	r30, 0x08	; 8
 6ea:	ee 16       	cp	r14, r30
 6ec:	f1 04       	cpc	r15, r1
 6ee:	c9 f4       	brne	.+50     	; 0x722 <change_state+0x17a>
 6f0:	fe 01       	movw	r30, r28
 6f2:	31 96       	adiw	r30, 0x01	; 1
						for(int i =0; i<8; i++){
							input_time[i] = 0;
 6f4:	11 92       	st	Z+, r1
 6f6:	11 92       	st	Z+, r1
			int receivedBytes = 0;
			while (current_state == PROGRAM){
				input = USART_Receive();
				if(input >= '0' && input <= '9'){
					if(receivedBytes == 8){
						for(int i =0; i<8; i++){
 6f8:	ae 16       	cp	r10, r30
 6fa:	bf 06       	cpc	r11, r31
 6fc:	d9 f7       	brne	.-10     	; 0x6f4 <change_state+0x14c>
							input_time[i] = 0;
						}
						sprintf(string_buffer, "00:00:00:00");
 6fe:	8c e0       	ldi	r24, 0x0C	; 12
 700:	e0 e0       	ldi	r30, 0x00	; 0
 702:	f1 e0       	ldi	r31, 0x01	; 1
 704:	d6 01       	movw	r26, r12
 706:	01 90       	ld	r0, Z+
 708:	0d 92       	st	X+, r0
 70a:	8a 95       	dec	r24
 70c:	e1 f7       	brne	.-8      	; 0x706 <change_state+0x15e>
						lcd_gotoxy(0,0);
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
						lcd_puts(string_buffer);
 716:	c6 01       	movw	r24, r12
 718:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
						receivedBytes = 0;
 71c:	e1 2c       	mov	r14, r1
 71e:	f1 2c       	mov	r15, r1
 720:	13 c0       	rjmp	.+38     	; 0x748 <change_state+0x1a0>
					} 
					for(int i =receivedBytes; i>0; i--){
 722:	1e 14       	cp	r1, r14
 724:	1f 04       	cpc	r1, r15
 726:	84 f4       	brge	.+32     	; 0x748 <change_state+0x1a0>
 728:	f7 01       	movw	r30, r14
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	8c 0f       	add	r24, r28
 734:	9d 1f       	adc	r25, r29
 736:	e8 0f       	add	r30, r24
 738:	f9 1f       	adc	r31, r25
						input_time[i] = input_time[i-1];
 73a:	92 91       	ld	r25, -Z
 73c:	82 91       	ld	r24, -Z
 73e:	93 83       	std	Z+3, r25	; 0x03
 740:	82 83       	std	Z+2, r24	; 0x02
						sprintf(string_buffer, "00:00:00:00");
						lcd_gotoxy(0,0);
						lcd_puts(string_buffer);
						receivedBytes = 0;
					} 
					for(int i =receivedBytes; i>0; i--){
 742:	e0 17       	cp	r30, r16
 744:	f1 07       	cpc	r31, r17
 746:	c9 f7       	brne	.-14     	; 0x73a <change_state+0x192>
						input_time[i] = input_time[i-1];
					}
					input_time[0] = input - '0';
 748:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <input>
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	c0 97       	sbiw	r24, 0x30	; 48
 750:	9a 83       	std	Y+2, r25	; 0x02
 752:	89 83       	std	Y+1, r24	; 0x01
					sprintf(string_buffer, "%d%d:%d%d:%d%d:%d%d", input_time[7],input_time[6],input_time[5],input_time[4],input_time[3],input_time[2],input_time[1],input_time[0]); // create string for output
 754:	9f 93       	push	r25
 756:	8f 93       	push	r24
 758:	8c 81       	ldd	r24, Y+4	; 0x04
 75a:	8f 93       	push	r24
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	8f 93       	push	r24
 760:	8e 81       	ldd	r24, Y+6	; 0x06
 762:	8f 93       	push	r24
 764:	8d 81       	ldd	r24, Y+5	; 0x05
 766:	8f 93       	push	r24
 768:	88 85       	ldd	r24, Y+8	; 0x08
 76a:	8f 93       	push	r24
 76c:	8f 81       	ldd	r24, Y+7	; 0x07
 76e:	8f 93       	push	r24
 770:	8a 85       	ldd	r24, Y+10	; 0x0a
 772:	8f 93       	push	r24
 774:	89 85       	ldd	r24, Y+9	; 0x09
 776:	8f 93       	push	r24
 778:	8c 85       	ldd	r24, Y+12	; 0x0c
 77a:	8f 93       	push	r24
 77c:	8b 85       	ldd	r24, Y+11	; 0x0b
 77e:	8f 93       	push	r24
 780:	8e 85       	ldd	r24, Y+14	; 0x0e
 782:	8f 93       	push	r24
 784:	8d 85       	ldd	r24, Y+13	; 0x0d
 786:	8f 93       	push	r24
 788:	88 89       	ldd	r24, Y+16	; 0x10
 78a:	8f 93       	push	r24
 78c:	8f 85       	ldd	r24, Y+15	; 0x0f
 78e:	8f 93       	push	r24
 790:	9f 92       	push	r9
 792:	8f 92       	push	r8
 794:	df 92       	push	r13
 796:	cf 92       	push	r12
 798:	0e 94 63 04 	call	0x8c6	; 0x8c6 <sprintf>
					lcd_gotoxy(0,0);
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
					lcd_puts(string_buffer);
 7a4:	c6 01       	movw	r24, r12
 7a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
					receivedBytes++;
 7aa:	9f ef       	ldi	r25, 0xFF	; 255
 7ac:	e9 1a       	sub	r14, r25
 7ae:	f9 0a       	sbc	r15, r25
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	f8 94       	cli
 7b4:	de bf       	out	0x3e, r29	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	cd bf       	out	0x3d, r28	; 61
 7ba:	30 c0       	rjmp	.+96     	; 0x81c <change_state+0x274>
				}
				else if(input == '*' && receivedBytes != 0){
 7bc:	8a 32       	cpi	r24, 0x2A	; 42
 7be:	71 f5       	brne	.+92     	; 0x81c <change_state+0x274>
 7c0:	e1 14       	cp	r14, r1
 7c2:	f1 04       	cpc	r15, r1
 7c4:	59 f1       	breq	.+86     	; 0x81c <change_state+0x274>
					/* init starting time */
					
					time.milliseconds = input_time[1]*10 + input_time[0];
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	88 0f       	add	r24, r24
 7ca:	98 2f       	mov	r25, r24
 7cc:	99 0f       	add	r25, r25
 7ce:	99 0f       	add	r25, r25
 7d0:	89 0f       	add	r24, r25
 7d2:	99 81       	ldd	r25, Y+1	; 0x01
 7d4:	89 0f       	add	r24, r25
 7d6:	f3 01       	movw	r30, r6
 7d8:	80 83       	st	Z, r24
					time.seconds = input_time[3]*10 + input_time[2];
 7da:	8f 81       	ldd	r24, Y+7	; 0x07
 7dc:	88 0f       	add	r24, r24
 7de:	98 2f       	mov	r25, r24
 7e0:	99 0f       	add	r25, r25
 7e2:	99 0f       	add	r25, r25
 7e4:	89 0f       	add	r24, r25
 7e6:	9d 81       	ldd	r25, Y+5	; 0x05
 7e8:	89 0f       	add	r24, r25
 7ea:	81 83       	std	Z+1, r24	; 0x01
					time.minutes = input_time[5]*10 + input_time[4];
 7ec:	8b 85       	ldd	r24, Y+11	; 0x0b
 7ee:	88 0f       	add	r24, r24
 7f0:	98 2f       	mov	r25, r24
 7f2:	99 0f       	add	r25, r25
 7f4:	99 0f       	add	r25, r25
 7f6:	89 0f       	add	r24, r25
 7f8:	99 85       	ldd	r25, Y+9	; 0x09
 7fa:	89 0f       	add	r24, r25
 7fc:	82 83       	std	Z+2, r24	; 0x02
					time.hours = input_time[7]*10 + input_time[6];
 7fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 800:	88 0f       	add	r24, r24
 802:	98 2f       	mov	r25, r24
 804:	99 0f       	add	r25, r25
 806:	99 0f       	add	r25, r25
 808:	89 0f       	add	r24, r25
 80a:	9d 85       	ldd	r25, Y+13	; 0x0d
 80c:	89 0f       	add	r24, r25
 80e:	83 83       	std	Z+3, r24	; 0x03
					
					/* convert seconds, minutes, hours to base 60s */
					convertTime();
 810:	0e 94 71 02 	call	0x4e2	; 0x4e2 <convertTime>
					
					/* start timer*/
					PORTC |= (1 << PORTC1); // enable button
 814:	41 9a       	sbi	0x08, 1	; 8
					change_state(RUNNING);
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <change_state>
			lcd_gotoxy(0,0);
			lcd_puts(string_buffer);
			/* record data being inputted */
			int input_time[] = {0,0,0,0,0,0,0,0};
			int receivedBytes = 0;
			while (current_state == PROGRAM){
 81c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <current_state>
 820:	81 30       	cpi	r24, 0x01	; 1
 822:	09 f4       	brne	.+2      	; 0x826 <change_state+0x27e>
 824:	58 cf       	rjmp	.-336    	; 0x6d6 <change_state+0x12e>
				}
			}
			break;
				
	}
}
 826:	60 96       	adiw	r28, 0x10	; 16
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	f8 94       	cli
 82c:	de bf       	out	0x3e, r29	; 62
 82e:	0f be       	out	0x3f, r0	; 63
 830:	cd bf       	out	0x3d, r28	; 61
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	0f 91       	pop	r16
 83a:	ff 90       	pop	r15
 83c:	ef 90       	pop	r14
 83e:	df 90       	pop	r13
 840:	cf 90       	pop	r12
 842:	bf 90       	pop	r11
 844:	af 90       	pop	r10
 846:	9f 90       	pop	r9
 848:	8f 90       	pop	r8
 84a:	7f 90       	pop	r7
 84c:	6f 90       	pop	r6
 84e:	08 95       	ret

00000850 <main>:


int main(void)
{	
	/*init LCD Display */
	lcd_init(LCD_DISP_ON);
 850:	8c e0       	ldi	r24, 0x0C	; 12
 852:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_init>
	lcd_clrscr(); 
 856:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
	
	/* init timer counter for clock counting */
	TCCR1B = (1 << CS10) | (1 << WGM12);		// set prescaling 1
 85a:	89 e0       	ldi	r24, 0x09	; 9
 85c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = 9999;								// set counter to be accurate to 100us (i.e OCR1A = 1/(1*1*(1/100us)) - 1 )
 860:	8f e0       	ldi	r24, 0x0F	; 15
 862:	97 e2       	ldi	r25, 0x27	; 39
 864:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 868:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	sei();										// must enable global interrupts, equivalent to SREG|= (1<<7)
 86c:	78 94       	sei
	
	/* init switch button */
	DDRC &= ~(1 << PORTC1);						// configure switch button input
 86e:	39 98       	cbi	0x07, 1	; 7
	PORTC |= (1 << PORTC1);						// enable internal pull up for switch button
 870:	41 9a       	sbi	0x08, 1	; 8

	
	/* init led test to record serial status */
	DDRD |= (1<<PORTD4);						// set led as output
 872:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~(1<<PORTD4);						// set led low
 874:	5c 98       	cbi	0x0b, 4	; 11
	
	/* init UART comm with baud rate 1000 */ 
	uart_RX_init(1000);
 876:	88 ee       	ldi	r24, 0xE8	; 232
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	0e 94 2f 01 	call	0x25e	; 0x25e <uart_RX_init>
	
	/* init first state as paused */
	timer_reset();
 87e:	0e 94 4e 01 	call	0x29c	; 0x29c <timer_reset>
	change_state(PAUSED);
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <change_state>
	

	while(1){
		
		/* go to next state if switch button pressed */
		if(!(PINC & (1<<PORTC1))){
 888:	31 99       	sbic	0x06, 1	; 6
 88a:	0f c0       	rjmp	.+30     	; 0x8aa <main+0x5a>
			if(current_state == RUNNING){
 88c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <current_state>
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	21 f4       	brne	.+8      	; 0x89c <main+0x4c>
				change_state(PAUSED);
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <change_state>
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <main+0x56>
			}
			else if(current_state == PAUSED){
 89c:	81 11       	cpse	r24, r1
 89e:	03 c0       	rjmp	.+6      	; 0x8a6 <main+0x56>
				change_state(RUNNING);
 8a0:	82 e0       	ldi	r24, 0x02	; 2
 8a2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <change_state>
			}
			
			while(!(PINC & (1<<PORTC1))); // fix debounce
 8a6:	31 9b       	sbis	0x06, 1	; 6
 8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <main+0x56>
		}
		
		if(current_state == PAUSED){
 8aa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <current_state>
 8ae:	81 11       	cpse	r24, r1
 8b0:	eb cf       	rjmp	.-42     	; 0x888 <main+0x38>
			input = USART_Receive();
 8b2:	0e 94 3e 01 	call	0x27c	; 0x27c <USART_Receive>
 8b6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <input>
			if (input == '#'){
 8ba:	83 32       	cpi	r24, 0x23	; 35
 8bc:	29 f7       	brne	.-54     	; 0x888 <main+0x38>
				change_state(PROGRAM);
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <change_state>
 8c4:	e1 cf       	rjmp	.-62     	; 0x888 <main+0x38>

000008c6 <sprintf>:
 8c6:	ae e0       	ldi	r26, 0x0E	; 14
 8c8:	b0 e0       	ldi	r27, 0x00	; 0
 8ca:	e9 e6       	ldi	r30, 0x69	; 105
 8cc:	f4 e0       	ldi	r31, 0x04	; 4
 8ce:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__prologue_saves__+0x1c>
 8d2:	0d 89       	ldd	r16, Y+21	; 0x15
 8d4:	1e 89       	ldd	r17, Y+22	; 0x16
 8d6:	86 e0       	ldi	r24, 0x06	; 6
 8d8:	8c 83       	std	Y+4, r24	; 0x04
 8da:	1a 83       	std	Y+2, r17	; 0x02
 8dc:	09 83       	std	Y+1, r16	; 0x01
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	9f e7       	ldi	r25, 0x7F	; 127
 8e2:	9e 83       	std	Y+6, r25	; 0x06
 8e4:	8d 83       	std	Y+5, r24	; 0x05
 8e6:	ae 01       	movw	r20, r28
 8e8:	47 5e       	subi	r20, 0xE7	; 231
 8ea:	5f 4f       	sbci	r21, 0xFF	; 255
 8ec:	6f 89       	ldd	r22, Y+23	; 0x17
 8ee:	78 8d       	ldd	r23, Y+24	; 0x18
 8f0:	ce 01       	movw	r24, r28
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	0e 94 85 04 	call	0x90a	; 0x90a <vfprintf>
 8f8:	ef 81       	ldd	r30, Y+7	; 0x07
 8fa:	f8 85       	ldd	r31, Y+8	; 0x08
 8fc:	e0 0f       	add	r30, r16
 8fe:	f1 1f       	adc	r31, r17
 900:	10 82       	st	Z, r1
 902:	2e 96       	adiw	r28, 0x0e	; 14
 904:	e4 e0       	ldi	r30, 0x04	; 4
 906:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__epilogue_restores__+0x1c>

0000090a <vfprintf>:
 90a:	ab e0       	ldi	r26, 0x0B	; 11
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	eb e8       	ldi	r30, 0x8B	; 139
 910:	f4 e0       	ldi	r31, 0x04	; 4
 912:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__prologue_saves__>
 916:	6c 01       	movw	r12, r24
 918:	7b 01       	movw	r14, r22
 91a:	8a 01       	movw	r16, r20
 91c:	fc 01       	movw	r30, r24
 91e:	17 82       	std	Z+7, r1	; 0x07
 920:	16 82       	std	Z+6, r1	; 0x06
 922:	83 81       	ldd	r24, Z+3	; 0x03
 924:	81 ff       	sbrs	r24, 1
 926:	cc c1       	rjmp	.+920    	; 0xcc0 <vfprintf+0x3b6>
 928:	ce 01       	movw	r24, r28
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	3c 01       	movw	r6, r24
 92e:	f6 01       	movw	r30, r12
 930:	93 81       	ldd	r25, Z+3	; 0x03
 932:	f7 01       	movw	r30, r14
 934:	93 fd       	sbrc	r25, 3
 936:	85 91       	lpm	r24, Z+
 938:	93 ff       	sbrs	r25, 3
 93a:	81 91       	ld	r24, Z+
 93c:	7f 01       	movw	r14, r30
 93e:	88 23       	and	r24, r24
 940:	09 f4       	brne	.+2      	; 0x944 <vfprintf+0x3a>
 942:	ba c1       	rjmp	.+884    	; 0xcb8 <vfprintf+0x3ae>
 944:	85 32       	cpi	r24, 0x25	; 37
 946:	39 f4       	brne	.+14     	; 0x956 <vfprintf+0x4c>
 948:	93 fd       	sbrc	r25, 3
 94a:	85 91       	lpm	r24, Z+
 94c:	93 ff       	sbrs	r25, 3
 94e:	81 91       	ld	r24, Z+
 950:	7f 01       	movw	r14, r30
 952:	85 32       	cpi	r24, 0x25	; 37
 954:	29 f4       	brne	.+10     	; 0x960 <vfprintf+0x56>
 956:	b6 01       	movw	r22, r12
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 95e:	e7 cf       	rjmp	.-50     	; 0x92e <vfprintf+0x24>
 960:	91 2c       	mov	r9, r1
 962:	21 2c       	mov	r2, r1
 964:	31 2c       	mov	r3, r1
 966:	ff e1       	ldi	r31, 0x1F	; 31
 968:	f3 15       	cp	r31, r3
 96a:	d8 f0       	brcs	.+54     	; 0x9a2 <vfprintf+0x98>
 96c:	8b 32       	cpi	r24, 0x2B	; 43
 96e:	79 f0       	breq	.+30     	; 0x98e <vfprintf+0x84>
 970:	38 f4       	brcc	.+14     	; 0x980 <vfprintf+0x76>
 972:	80 32       	cpi	r24, 0x20	; 32
 974:	79 f0       	breq	.+30     	; 0x994 <vfprintf+0x8a>
 976:	83 32       	cpi	r24, 0x23	; 35
 978:	a1 f4       	brne	.+40     	; 0x9a2 <vfprintf+0x98>
 97a:	23 2d       	mov	r18, r3
 97c:	20 61       	ori	r18, 0x10	; 16
 97e:	1d c0       	rjmp	.+58     	; 0x9ba <vfprintf+0xb0>
 980:	8d 32       	cpi	r24, 0x2D	; 45
 982:	61 f0       	breq	.+24     	; 0x99c <vfprintf+0x92>
 984:	80 33       	cpi	r24, 0x30	; 48
 986:	69 f4       	brne	.+26     	; 0x9a2 <vfprintf+0x98>
 988:	23 2d       	mov	r18, r3
 98a:	21 60       	ori	r18, 0x01	; 1
 98c:	16 c0       	rjmp	.+44     	; 0x9ba <vfprintf+0xb0>
 98e:	83 2d       	mov	r24, r3
 990:	82 60       	ori	r24, 0x02	; 2
 992:	38 2e       	mov	r3, r24
 994:	e3 2d       	mov	r30, r3
 996:	e4 60       	ori	r30, 0x04	; 4
 998:	3e 2e       	mov	r3, r30
 99a:	2a c0       	rjmp	.+84     	; 0x9f0 <vfprintf+0xe6>
 99c:	f3 2d       	mov	r31, r3
 99e:	f8 60       	ori	r31, 0x08	; 8
 9a0:	1d c0       	rjmp	.+58     	; 0x9dc <vfprintf+0xd2>
 9a2:	37 fc       	sbrc	r3, 7
 9a4:	2d c0       	rjmp	.+90     	; 0xa00 <vfprintf+0xf6>
 9a6:	20 ed       	ldi	r18, 0xD0	; 208
 9a8:	28 0f       	add	r18, r24
 9aa:	2a 30       	cpi	r18, 0x0A	; 10
 9ac:	40 f0       	brcs	.+16     	; 0x9be <vfprintf+0xb4>
 9ae:	8e 32       	cpi	r24, 0x2E	; 46
 9b0:	b9 f4       	brne	.+46     	; 0x9e0 <vfprintf+0xd6>
 9b2:	36 fc       	sbrc	r3, 6
 9b4:	81 c1       	rjmp	.+770    	; 0xcb8 <vfprintf+0x3ae>
 9b6:	23 2d       	mov	r18, r3
 9b8:	20 64       	ori	r18, 0x40	; 64
 9ba:	32 2e       	mov	r3, r18
 9bc:	19 c0       	rjmp	.+50     	; 0x9f0 <vfprintf+0xe6>
 9be:	36 fe       	sbrs	r3, 6
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <vfprintf+0xc4>
 9c2:	8a e0       	ldi	r24, 0x0A	; 10
 9c4:	98 9e       	mul	r9, r24
 9c6:	20 0d       	add	r18, r0
 9c8:	11 24       	eor	r1, r1
 9ca:	92 2e       	mov	r9, r18
 9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <vfprintf+0xe6>
 9ce:	ea e0       	ldi	r30, 0x0A	; 10
 9d0:	2e 9e       	mul	r2, r30
 9d2:	20 0d       	add	r18, r0
 9d4:	11 24       	eor	r1, r1
 9d6:	22 2e       	mov	r2, r18
 9d8:	f3 2d       	mov	r31, r3
 9da:	f0 62       	ori	r31, 0x20	; 32
 9dc:	3f 2e       	mov	r3, r31
 9de:	08 c0       	rjmp	.+16     	; 0x9f0 <vfprintf+0xe6>
 9e0:	8c 36       	cpi	r24, 0x6C	; 108
 9e2:	21 f4       	brne	.+8      	; 0x9ec <vfprintf+0xe2>
 9e4:	83 2d       	mov	r24, r3
 9e6:	80 68       	ori	r24, 0x80	; 128
 9e8:	38 2e       	mov	r3, r24
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <vfprintf+0xe6>
 9ec:	88 36       	cpi	r24, 0x68	; 104
 9ee:	41 f4       	brne	.+16     	; 0xa00 <vfprintf+0xf6>
 9f0:	f7 01       	movw	r30, r14
 9f2:	93 fd       	sbrc	r25, 3
 9f4:	85 91       	lpm	r24, Z+
 9f6:	93 ff       	sbrs	r25, 3
 9f8:	81 91       	ld	r24, Z+
 9fa:	7f 01       	movw	r14, r30
 9fc:	81 11       	cpse	r24, r1
 9fe:	b3 cf       	rjmp	.-154    	; 0x966 <vfprintf+0x5c>
 a00:	98 2f       	mov	r25, r24
 a02:	9f 7d       	andi	r25, 0xDF	; 223
 a04:	95 54       	subi	r25, 0x45	; 69
 a06:	93 30       	cpi	r25, 0x03	; 3
 a08:	28 f4       	brcc	.+10     	; 0xa14 <vfprintf+0x10a>
 a0a:	0c 5f       	subi	r16, 0xFC	; 252
 a0c:	1f 4f       	sbci	r17, 0xFF	; 255
 a0e:	9f e3       	ldi	r25, 0x3F	; 63
 a10:	99 83       	std	Y+1, r25	; 0x01
 a12:	0d c0       	rjmp	.+26     	; 0xa2e <vfprintf+0x124>
 a14:	83 36       	cpi	r24, 0x63	; 99
 a16:	31 f0       	breq	.+12     	; 0xa24 <vfprintf+0x11a>
 a18:	83 37       	cpi	r24, 0x73	; 115
 a1a:	71 f0       	breq	.+28     	; 0xa38 <vfprintf+0x12e>
 a1c:	83 35       	cpi	r24, 0x53	; 83
 a1e:	09 f0       	breq	.+2      	; 0xa22 <vfprintf+0x118>
 a20:	59 c0       	rjmp	.+178    	; 0xad4 <vfprintf+0x1ca>
 a22:	21 c0       	rjmp	.+66     	; 0xa66 <vfprintf+0x15c>
 a24:	f8 01       	movw	r30, r16
 a26:	80 81       	ld	r24, Z
 a28:	89 83       	std	Y+1, r24	; 0x01
 a2a:	0e 5f       	subi	r16, 0xFE	; 254
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	88 24       	eor	r8, r8
 a30:	83 94       	inc	r8
 a32:	91 2c       	mov	r9, r1
 a34:	53 01       	movw	r10, r6
 a36:	13 c0       	rjmp	.+38     	; 0xa5e <vfprintf+0x154>
 a38:	28 01       	movw	r4, r16
 a3a:	f2 e0       	ldi	r31, 0x02	; 2
 a3c:	4f 0e       	add	r4, r31
 a3e:	51 1c       	adc	r5, r1
 a40:	f8 01       	movw	r30, r16
 a42:	a0 80       	ld	r10, Z
 a44:	b1 80       	ldd	r11, Z+1	; 0x01
 a46:	36 fe       	sbrs	r3, 6
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <vfprintf+0x146>
 a4a:	69 2d       	mov	r22, r9
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <vfprintf+0x14a>
 a50:	6f ef       	ldi	r22, 0xFF	; 255
 a52:	7f ef       	ldi	r23, 0xFF	; 255
 a54:	c5 01       	movw	r24, r10
 a56:	0e 94 71 06 	call	0xce2	; 0xce2 <strnlen>
 a5a:	4c 01       	movw	r8, r24
 a5c:	82 01       	movw	r16, r4
 a5e:	f3 2d       	mov	r31, r3
 a60:	ff 77       	andi	r31, 0x7F	; 127
 a62:	3f 2e       	mov	r3, r31
 a64:	16 c0       	rjmp	.+44     	; 0xa92 <vfprintf+0x188>
 a66:	28 01       	movw	r4, r16
 a68:	22 e0       	ldi	r18, 0x02	; 2
 a6a:	42 0e       	add	r4, r18
 a6c:	51 1c       	adc	r5, r1
 a6e:	f8 01       	movw	r30, r16
 a70:	a0 80       	ld	r10, Z
 a72:	b1 80       	ldd	r11, Z+1	; 0x01
 a74:	36 fe       	sbrs	r3, 6
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <vfprintf+0x174>
 a78:	69 2d       	mov	r22, r9
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vfprintf+0x178>
 a7e:	6f ef       	ldi	r22, 0xFF	; 255
 a80:	7f ef       	ldi	r23, 0xFF	; 255
 a82:	c5 01       	movw	r24, r10
 a84:	0e 94 66 06 	call	0xccc	; 0xccc <strnlen_P>
 a88:	4c 01       	movw	r8, r24
 a8a:	f3 2d       	mov	r31, r3
 a8c:	f0 68       	ori	r31, 0x80	; 128
 a8e:	3f 2e       	mov	r3, r31
 a90:	82 01       	movw	r16, r4
 a92:	33 fc       	sbrc	r3, 3
 a94:	1b c0       	rjmp	.+54     	; 0xacc <vfprintf+0x1c2>
 a96:	82 2d       	mov	r24, r2
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	88 16       	cp	r8, r24
 a9c:	99 06       	cpc	r9, r25
 a9e:	b0 f4       	brcc	.+44     	; 0xacc <vfprintf+0x1c2>
 aa0:	b6 01       	movw	r22, r12
 aa2:	80 e2       	ldi	r24, 0x20	; 32
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 aaa:	2a 94       	dec	r2
 aac:	f4 cf       	rjmp	.-24     	; 0xa96 <vfprintf+0x18c>
 aae:	f5 01       	movw	r30, r10
 ab0:	37 fc       	sbrc	r3, 7
 ab2:	85 91       	lpm	r24, Z+
 ab4:	37 fe       	sbrs	r3, 7
 ab6:	81 91       	ld	r24, Z+
 ab8:	5f 01       	movw	r10, r30
 aba:	b6 01       	movw	r22, r12
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 ac2:	21 10       	cpse	r2, r1
 ac4:	2a 94       	dec	r2
 ac6:	21 e0       	ldi	r18, 0x01	; 1
 ac8:	82 1a       	sub	r8, r18
 aca:	91 08       	sbc	r9, r1
 acc:	81 14       	cp	r8, r1
 ace:	91 04       	cpc	r9, r1
 ad0:	71 f7       	brne	.-36     	; 0xaae <vfprintf+0x1a4>
 ad2:	e8 c0       	rjmp	.+464    	; 0xca4 <vfprintf+0x39a>
 ad4:	84 36       	cpi	r24, 0x64	; 100
 ad6:	11 f0       	breq	.+4      	; 0xadc <vfprintf+0x1d2>
 ad8:	89 36       	cpi	r24, 0x69	; 105
 ada:	41 f5       	brne	.+80     	; 0xb2c <vfprintf+0x222>
 adc:	f8 01       	movw	r30, r16
 ade:	37 fe       	sbrs	r3, 7
 ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <vfprintf+0x1e6>
 ae2:	60 81       	ld	r22, Z
 ae4:	71 81       	ldd	r23, Z+1	; 0x01
 ae6:	82 81       	ldd	r24, Z+2	; 0x02
 ae8:	93 81       	ldd	r25, Z+3	; 0x03
 aea:	0c 5f       	subi	r16, 0xFC	; 252
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <vfprintf+0x1f6>
 af0:	60 81       	ld	r22, Z
 af2:	71 81       	ldd	r23, Z+1	; 0x01
 af4:	07 2e       	mov	r0, r23
 af6:	00 0c       	add	r0, r0
 af8:	88 0b       	sbc	r24, r24
 afa:	99 0b       	sbc	r25, r25
 afc:	0e 5f       	subi	r16, 0xFE	; 254
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	f3 2d       	mov	r31, r3
 b02:	ff 76       	andi	r31, 0x6F	; 111
 b04:	3f 2e       	mov	r3, r31
 b06:	97 ff       	sbrs	r25, 7
 b08:	09 c0       	rjmp	.+18     	; 0xb1c <vfprintf+0x212>
 b0a:	90 95       	com	r25
 b0c:	80 95       	com	r24
 b0e:	70 95       	com	r23
 b10:	61 95       	neg	r22
 b12:	7f 4f       	sbci	r23, 0xFF	; 255
 b14:	8f 4f       	sbci	r24, 0xFF	; 255
 b16:	9f 4f       	sbci	r25, 0xFF	; 255
 b18:	f0 68       	ori	r31, 0x80	; 128
 b1a:	3f 2e       	mov	r3, r31
 b1c:	2a e0       	ldi	r18, 0x0A	; 10
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	a3 01       	movw	r20, r6
 b22:	0e 94 b8 06 	call	0xd70	; 0xd70 <__ultoa_invert>
 b26:	88 2e       	mov	r8, r24
 b28:	86 18       	sub	r8, r6
 b2a:	45 c0       	rjmp	.+138    	; 0xbb6 <vfprintf+0x2ac>
 b2c:	85 37       	cpi	r24, 0x75	; 117
 b2e:	31 f4       	brne	.+12     	; 0xb3c <vfprintf+0x232>
 b30:	23 2d       	mov	r18, r3
 b32:	2f 7e       	andi	r18, 0xEF	; 239
 b34:	b2 2e       	mov	r11, r18
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	25 c0       	rjmp	.+74     	; 0xb86 <vfprintf+0x27c>
 b3c:	93 2d       	mov	r25, r3
 b3e:	99 7f       	andi	r25, 0xF9	; 249
 b40:	b9 2e       	mov	r11, r25
 b42:	8f 36       	cpi	r24, 0x6F	; 111
 b44:	c1 f0       	breq	.+48     	; 0xb76 <vfprintf+0x26c>
 b46:	18 f4       	brcc	.+6      	; 0xb4e <vfprintf+0x244>
 b48:	88 35       	cpi	r24, 0x58	; 88
 b4a:	79 f0       	breq	.+30     	; 0xb6a <vfprintf+0x260>
 b4c:	b5 c0       	rjmp	.+362    	; 0xcb8 <vfprintf+0x3ae>
 b4e:	80 37       	cpi	r24, 0x70	; 112
 b50:	19 f0       	breq	.+6      	; 0xb58 <vfprintf+0x24e>
 b52:	88 37       	cpi	r24, 0x78	; 120
 b54:	21 f0       	breq	.+8      	; 0xb5e <vfprintf+0x254>
 b56:	b0 c0       	rjmp	.+352    	; 0xcb8 <vfprintf+0x3ae>
 b58:	e9 2f       	mov	r30, r25
 b5a:	e0 61       	ori	r30, 0x10	; 16
 b5c:	be 2e       	mov	r11, r30
 b5e:	b4 fe       	sbrs	r11, 4
 b60:	0d c0       	rjmp	.+26     	; 0xb7c <vfprintf+0x272>
 b62:	fb 2d       	mov	r31, r11
 b64:	f4 60       	ori	r31, 0x04	; 4
 b66:	bf 2e       	mov	r11, r31
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <vfprintf+0x272>
 b6a:	34 fe       	sbrs	r3, 4
 b6c:	0a c0       	rjmp	.+20     	; 0xb82 <vfprintf+0x278>
 b6e:	29 2f       	mov	r18, r25
 b70:	26 60       	ori	r18, 0x06	; 6
 b72:	b2 2e       	mov	r11, r18
 b74:	06 c0       	rjmp	.+12     	; 0xb82 <vfprintf+0x278>
 b76:	28 e0       	ldi	r18, 0x08	; 8
 b78:	30 e0       	ldi	r19, 0x00	; 0
 b7a:	05 c0       	rjmp	.+10     	; 0xb86 <vfprintf+0x27c>
 b7c:	20 e1       	ldi	r18, 0x10	; 16
 b7e:	30 e0       	ldi	r19, 0x00	; 0
 b80:	02 c0       	rjmp	.+4      	; 0xb86 <vfprintf+0x27c>
 b82:	20 e1       	ldi	r18, 0x10	; 16
 b84:	32 e0       	ldi	r19, 0x02	; 2
 b86:	f8 01       	movw	r30, r16
 b88:	b7 fe       	sbrs	r11, 7
 b8a:	07 c0       	rjmp	.+14     	; 0xb9a <vfprintf+0x290>
 b8c:	60 81       	ld	r22, Z
 b8e:	71 81       	ldd	r23, Z+1	; 0x01
 b90:	82 81       	ldd	r24, Z+2	; 0x02
 b92:	93 81       	ldd	r25, Z+3	; 0x03
 b94:	0c 5f       	subi	r16, 0xFC	; 252
 b96:	1f 4f       	sbci	r17, 0xFF	; 255
 b98:	06 c0       	rjmp	.+12     	; 0xba6 <vfprintf+0x29c>
 b9a:	60 81       	ld	r22, Z
 b9c:	71 81       	ldd	r23, Z+1	; 0x01
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 5f       	subi	r16, 0xFE	; 254
 ba4:	1f 4f       	sbci	r17, 0xFF	; 255
 ba6:	a3 01       	movw	r20, r6
 ba8:	0e 94 b8 06 	call	0xd70	; 0xd70 <__ultoa_invert>
 bac:	88 2e       	mov	r8, r24
 bae:	86 18       	sub	r8, r6
 bb0:	fb 2d       	mov	r31, r11
 bb2:	ff 77       	andi	r31, 0x7F	; 127
 bb4:	3f 2e       	mov	r3, r31
 bb6:	36 fe       	sbrs	r3, 6
 bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <vfprintf+0x2ca>
 bba:	23 2d       	mov	r18, r3
 bbc:	2e 7f       	andi	r18, 0xFE	; 254
 bbe:	a2 2e       	mov	r10, r18
 bc0:	89 14       	cp	r8, r9
 bc2:	58 f4       	brcc	.+22     	; 0xbda <vfprintf+0x2d0>
 bc4:	34 fe       	sbrs	r3, 4
 bc6:	0b c0       	rjmp	.+22     	; 0xbde <vfprintf+0x2d4>
 bc8:	32 fc       	sbrc	r3, 2
 bca:	09 c0       	rjmp	.+18     	; 0xbde <vfprintf+0x2d4>
 bcc:	83 2d       	mov	r24, r3
 bce:	8e 7e       	andi	r24, 0xEE	; 238
 bd0:	a8 2e       	mov	r10, r24
 bd2:	05 c0       	rjmp	.+10     	; 0xbde <vfprintf+0x2d4>
 bd4:	b8 2c       	mov	r11, r8
 bd6:	a3 2c       	mov	r10, r3
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <vfprintf+0x2d6>
 bda:	b8 2c       	mov	r11, r8
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <vfprintf+0x2d6>
 bde:	b9 2c       	mov	r11, r9
 be0:	a4 fe       	sbrs	r10, 4
 be2:	0f c0       	rjmp	.+30     	; 0xc02 <vfprintf+0x2f8>
 be4:	fe 01       	movw	r30, r28
 be6:	e8 0d       	add	r30, r8
 be8:	f1 1d       	adc	r31, r1
 bea:	80 81       	ld	r24, Z
 bec:	80 33       	cpi	r24, 0x30	; 48
 bee:	21 f4       	brne	.+8      	; 0xbf8 <vfprintf+0x2ee>
 bf0:	9a 2d       	mov	r25, r10
 bf2:	99 7e       	andi	r25, 0xE9	; 233
 bf4:	a9 2e       	mov	r10, r25
 bf6:	09 c0       	rjmp	.+18     	; 0xc0a <vfprintf+0x300>
 bf8:	a2 fe       	sbrs	r10, 2
 bfa:	06 c0       	rjmp	.+12     	; 0xc08 <vfprintf+0x2fe>
 bfc:	b3 94       	inc	r11
 bfe:	b3 94       	inc	r11
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <vfprintf+0x300>
 c02:	8a 2d       	mov	r24, r10
 c04:	86 78       	andi	r24, 0x86	; 134
 c06:	09 f0       	breq	.+2      	; 0xc0a <vfprintf+0x300>
 c08:	b3 94       	inc	r11
 c0a:	a3 fc       	sbrc	r10, 3
 c0c:	11 c0       	rjmp	.+34     	; 0xc30 <vfprintf+0x326>
 c0e:	a0 fe       	sbrs	r10, 0
 c10:	06 c0       	rjmp	.+12     	; 0xc1e <vfprintf+0x314>
 c12:	b2 14       	cp	r11, r2
 c14:	88 f4       	brcc	.+34     	; 0xc38 <vfprintf+0x32e>
 c16:	28 0c       	add	r2, r8
 c18:	92 2c       	mov	r9, r2
 c1a:	9b 18       	sub	r9, r11
 c1c:	0e c0       	rjmp	.+28     	; 0xc3a <vfprintf+0x330>
 c1e:	b2 14       	cp	r11, r2
 c20:	60 f4       	brcc	.+24     	; 0xc3a <vfprintf+0x330>
 c22:	b6 01       	movw	r22, r12
 c24:	80 e2       	ldi	r24, 0x20	; 32
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c2c:	b3 94       	inc	r11
 c2e:	f7 cf       	rjmp	.-18     	; 0xc1e <vfprintf+0x314>
 c30:	b2 14       	cp	r11, r2
 c32:	18 f4       	brcc	.+6      	; 0xc3a <vfprintf+0x330>
 c34:	2b 18       	sub	r2, r11
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x332>
 c38:	98 2c       	mov	r9, r8
 c3a:	21 2c       	mov	r2, r1
 c3c:	a4 fe       	sbrs	r10, 4
 c3e:	10 c0       	rjmp	.+32     	; 0xc60 <vfprintf+0x356>
 c40:	b6 01       	movw	r22, r12
 c42:	80 e3       	ldi	r24, 0x30	; 48
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c4a:	a2 fe       	sbrs	r10, 2
 c4c:	17 c0       	rjmp	.+46     	; 0xc7c <vfprintf+0x372>
 c4e:	a1 fc       	sbrc	r10, 1
 c50:	03 c0       	rjmp	.+6      	; 0xc58 <vfprintf+0x34e>
 c52:	88 e7       	ldi	r24, 0x78	; 120
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x352>
 c58:	88 e5       	ldi	r24, 0x58	; 88
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	b6 01       	movw	r22, r12
 c5e:	0c c0       	rjmp	.+24     	; 0xc78 <vfprintf+0x36e>
 c60:	8a 2d       	mov	r24, r10
 c62:	86 78       	andi	r24, 0x86	; 134
 c64:	59 f0       	breq	.+22     	; 0xc7c <vfprintf+0x372>
 c66:	a1 fe       	sbrs	r10, 1
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x364>
 c6a:	8b e2       	ldi	r24, 0x2B	; 43
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <vfprintf+0x366>
 c6e:	80 e2       	ldi	r24, 0x20	; 32
 c70:	a7 fc       	sbrc	r10, 7
 c72:	8d e2       	ldi	r24, 0x2D	; 45
 c74:	b6 01       	movw	r22, r12
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c7c:	89 14       	cp	r8, r9
 c7e:	38 f4       	brcc	.+14     	; 0xc8e <vfprintf+0x384>
 c80:	b6 01       	movw	r22, r12
 c82:	80 e3       	ldi	r24, 0x30	; 48
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 c8a:	9a 94       	dec	r9
 c8c:	f7 cf       	rjmp	.-18     	; 0xc7c <vfprintf+0x372>
 c8e:	8a 94       	dec	r8
 c90:	f3 01       	movw	r30, r6
 c92:	e8 0d       	add	r30, r8
 c94:	f1 1d       	adc	r31, r1
 c96:	80 81       	ld	r24, Z
 c98:	b6 01       	movw	r22, r12
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 ca0:	81 10       	cpse	r8, r1
 ca2:	f5 cf       	rjmp	.-22     	; 0xc8e <vfprintf+0x384>
 ca4:	22 20       	and	r2, r2
 ca6:	09 f4       	brne	.+2      	; 0xcaa <vfprintf+0x3a0>
 ca8:	42 ce       	rjmp	.-892    	; 0x92e <vfprintf+0x24>
 caa:	b6 01       	movw	r22, r12
 cac:	80 e2       	ldi	r24, 0x20	; 32
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <fputc>
 cb4:	2a 94       	dec	r2
 cb6:	f6 cf       	rjmp	.-20     	; 0xca4 <vfprintf+0x39a>
 cb8:	f6 01       	movw	r30, r12
 cba:	86 81       	ldd	r24, Z+6	; 0x06
 cbc:	97 81       	ldd	r25, Z+7	; 0x07
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <vfprintf+0x3ba>
 cc0:	8f ef       	ldi	r24, 0xFF	; 255
 cc2:	9f ef       	ldi	r25, 0xFF	; 255
 cc4:	2b 96       	adiw	r28, 0x0b	; 11
 cc6:	e2 e1       	ldi	r30, 0x12	; 18
 cc8:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__epilogue_restores__>

00000ccc <strnlen_P>:
 ccc:	fc 01       	movw	r30, r24
 cce:	05 90       	lpm	r0, Z+
 cd0:	61 50       	subi	r22, 0x01	; 1
 cd2:	70 40       	sbci	r23, 0x00	; 0
 cd4:	01 10       	cpse	r0, r1
 cd6:	d8 f7       	brcc	.-10     	; 0xcce <strnlen_P+0x2>
 cd8:	80 95       	com	r24
 cda:	90 95       	com	r25
 cdc:	8e 0f       	add	r24, r30
 cde:	9f 1f       	adc	r25, r31
 ce0:	08 95       	ret

00000ce2 <strnlen>:
 ce2:	fc 01       	movw	r30, r24
 ce4:	61 50       	subi	r22, 0x01	; 1
 ce6:	70 40       	sbci	r23, 0x00	; 0
 ce8:	01 90       	ld	r0, Z+
 cea:	01 10       	cpse	r0, r1
 cec:	d8 f7       	brcc	.-10     	; 0xce4 <strnlen+0x2>
 cee:	80 95       	com	r24
 cf0:	90 95       	com	r25
 cf2:	8e 0f       	add	r24, r30
 cf4:	9f 1f       	adc	r25, r31
 cf6:	08 95       	ret

00000cf8 <fputc>:
 cf8:	0f 93       	push	r16
 cfa:	1f 93       	push	r17
 cfc:	cf 93       	push	r28
 cfe:	df 93       	push	r29
 d00:	fb 01       	movw	r30, r22
 d02:	23 81       	ldd	r18, Z+3	; 0x03
 d04:	21 fd       	sbrc	r18, 1
 d06:	03 c0       	rjmp	.+6      	; 0xd0e <fputc+0x16>
 d08:	8f ef       	ldi	r24, 0xFF	; 255
 d0a:	9f ef       	ldi	r25, 0xFF	; 255
 d0c:	2c c0       	rjmp	.+88     	; 0xd66 <fputc+0x6e>
 d0e:	22 ff       	sbrs	r18, 2
 d10:	16 c0       	rjmp	.+44     	; 0xd3e <fputc+0x46>
 d12:	46 81       	ldd	r20, Z+6	; 0x06
 d14:	57 81       	ldd	r21, Z+7	; 0x07
 d16:	24 81       	ldd	r18, Z+4	; 0x04
 d18:	35 81       	ldd	r19, Z+5	; 0x05
 d1a:	42 17       	cp	r20, r18
 d1c:	53 07       	cpc	r21, r19
 d1e:	44 f4       	brge	.+16     	; 0xd30 <fputc+0x38>
 d20:	a0 81       	ld	r26, Z
 d22:	b1 81       	ldd	r27, Z+1	; 0x01
 d24:	9d 01       	movw	r18, r26
 d26:	2f 5f       	subi	r18, 0xFF	; 255
 d28:	3f 4f       	sbci	r19, 0xFF	; 255
 d2a:	31 83       	std	Z+1, r19	; 0x01
 d2c:	20 83       	st	Z, r18
 d2e:	8c 93       	st	X, r24
 d30:	26 81       	ldd	r18, Z+6	; 0x06
 d32:	37 81       	ldd	r19, Z+7	; 0x07
 d34:	2f 5f       	subi	r18, 0xFF	; 255
 d36:	3f 4f       	sbci	r19, 0xFF	; 255
 d38:	37 83       	std	Z+7, r19	; 0x07
 d3a:	26 83       	std	Z+6, r18	; 0x06
 d3c:	14 c0       	rjmp	.+40     	; 0xd66 <fputc+0x6e>
 d3e:	8b 01       	movw	r16, r22
 d40:	ec 01       	movw	r28, r24
 d42:	fb 01       	movw	r30, r22
 d44:	00 84       	ldd	r0, Z+8	; 0x08
 d46:	f1 85       	ldd	r31, Z+9	; 0x09
 d48:	e0 2d       	mov	r30, r0
 d4a:	09 95       	icall
 d4c:	89 2b       	or	r24, r25
 d4e:	e1 f6       	brne	.-72     	; 0xd08 <fputc+0x10>
 d50:	d8 01       	movw	r26, r16
 d52:	16 96       	adiw	r26, 0x06	; 6
 d54:	8d 91       	ld	r24, X+
 d56:	9c 91       	ld	r25, X
 d58:	17 97       	sbiw	r26, 0x07	; 7
 d5a:	01 96       	adiw	r24, 0x01	; 1
 d5c:	17 96       	adiw	r26, 0x07	; 7
 d5e:	9c 93       	st	X, r25
 d60:	8e 93       	st	-X, r24
 d62:	16 97       	sbiw	r26, 0x06	; 6
 d64:	ce 01       	movw	r24, r28
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	1f 91       	pop	r17
 d6c:	0f 91       	pop	r16
 d6e:	08 95       	ret

00000d70 <__ultoa_invert>:
 d70:	fa 01       	movw	r30, r20
 d72:	aa 27       	eor	r26, r26
 d74:	28 30       	cpi	r18, 0x08	; 8
 d76:	51 f1       	breq	.+84     	; 0xdcc <__ultoa_invert+0x5c>
 d78:	20 31       	cpi	r18, 0x10	; 16
 d7a:	81 f1       	breq	.+96     	; 0xddc <__ultoa_invert+0x6c>
 d7c:	e8 94       	clt
 d7e:	6f 93       	push	r22
 d80:	6e 7f       	andi	r22, 0xFE	; 254
 d82:	6e 5f       	subi	r22, 0xFE	; 254
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	8f 4f       	sbci	r24, 0xFF	; 255
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	af 4f       	sbci	r26, 0xFF	; 255
 d8c:	b1 e0       	ldi	r27, 0x01	; 1
 d8e:	3e d0       	rcall	.+124    	; 0xe0c <__ultoa_invert+0x9c>
 d90:	b4 e0       	ldi	r27, 0x04	; 4
 d92:	3c d0       	rcall	.+120    	; 0xe0c <__ultoa_invert+0x9c>
 d94:	67 0f       	add	r22, r23
 d96:	78 1f       	adc	r23, r24
 d98:	89 1f       	adc	r24, r25
 d9a:	9a 1f       	adc	r25, r26
 d9c:	a1 1d       	adc	r26, r1
 d9e:	68 0f       	add	r22, r24
 da0:	79 1f       	adc	r23, r25
 da2:	8a 1f       	adc	r24, r26
 da4:	91 1d       	adc	r25, r1
 da6:	a1 1d       	adc	r26, r1
 da8:	6a 0f       	add	r22, r26
 daa:	71 1d       	adc	r23, r1
 dac:	81 1d       	adc	r24, r1
 dae:	91 1d       	adc	r25, r1
 db0:	a1 1d       	adc	r26, r1
 db2:	20 d0       	rcall	.+64     	; 0xdf4 <__ultoa_invert+0x84>
 db4:	09 f4       	brne	.+2      	; 0xdb8 <__ultoa_invert+0x48>
 db6:	68 94       	set
 db8:	3f 91       	pop	r19
 dba:	2a e0       	ldi	r18, 0x0A	; 10
 dbc:	26 9f       	mul	r18, r22
 dbe:	11 24       	eor	r1, r1
 dc0:	30 19       	sub	r19, r0
 dc2:	30 5d       	subi	r19, 0xD0	; 208
 dc4:	31 93       	st	Z+, r19
 dc6:	de f6       	brtc	.-74     	; 0xd7e <__ultoa_invert+0xe>
 dc8:	cf 01       	movw	r24, r30
 dca:	08 95       	ret
 dcc:	46 2f       	mov	r20, r22
 dce:	47 70       	andi	r20, 0x07	; 7
 dd0:	40 5d       	subi	r20, 0xD0	; 208
 dd2:	41 93       	st	Z+, r20
 dd4:	b3 e0       	ldi	r27, 0x03	; 3
 dd6:	0f d0       	rcall	.+30     	; 0xdf6 <__ultoa_invert+0x86>
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <__ultoa_invert+0x5c>
 dda:	f6 cf       	rjmp	.-20     	; 0xdc8 <__ultoa_invert+0x58>
 ddc:	46 2f       	mov	r20, r22
 dde:	4f 70       	andi	r20, 0x0F	; 15
 de0:	40 5d       	subi	r20, 0xD0	; 208
 de2:	4a 33       	cpi	r20, 0x3A	; 58
 de4:	18 f0       	brcs	.+6      	; 0xdec <__ultoa_invert+0x7c>
 de6:	49 5d       	subi	r20, 0xD9	; 217
 de8:	31 fd       	sbrc	r19, 1
 dea:	40 52       	subi	r20, 0x20	; 32
 dec:	41 93       	st	Z+, r20
 dee:	02 d0       	rcall	.+4      	; 0xdf4 <__ultoa_invert+0x84>
 df0:	a9 f7       	brne	.-22     	; 0xddc <__ultoa_invert+0x6c>
 df2:	ea cf       	rjmp	.-44     	; 0xdc8 <__ultoa_invert+0x58>
 df4:	b4 e0       	ldi	r27, 0x04	; 4
 df6:	a6 95       	lsr	r26
 df8:	97 95       	ror	r25
 dfa:	87 95       	ror	r24
 dfc:	77 95       	ror	r23
 dfe:	67 95       	ror	r22
 e00:	ba 95       	dec	r27
 e02:	c9 f7       	brne	.-14     	; 0xdf6 <__ultoa_invert+0x86>
 e04:	00 97       	sbiw	r24, 0x00	; 0
 e06:	61 05       	cpc	r22, r1
 e08:	71 05       	cpc	r23, r1
 e0a:	08 95       	ret
 e0c:	9b 01       	movw	r18, r22
 e0e:	ac 01       	movw	r20, r24
 e10:	0a 2e       	mov	r0, r26
 e12:	06 94       	lsr	r0
 e14:	57 95       	ror	r21
 e16:	47 95       	ror	r20
 e18:	37 95       	ror	r19
 e1a:	27 95       	ror	r18
 e1c:	ba 95       	dec	r27
 e1e:	c9 f7       	brne	.-14     	; 0xe12 <__ultoa_invert+0xa2>
 e20:	62 0f       	add	r22, r18
 e22:	73 1f       	adc	r23, r19
 e24:	84 1f       	adc	r24, r20
 e26:	95 1f       	adc	r25, r21
 e28:	a0 1d       	adc	r26, r0
 e2a:	08 95       	ret

00000e2c <__prologue_saves__>:
 e2c:	2f 92       	push	r2
 e2e:	3f 92       	push	r3
 e30:	4f 92       	push	r4
 e32:	5f 92       	push	r5
 e34:	6f 92       	push	r6
 e36:	7f 92       	push	r7
 e38:	8f 92       	push	r8
 e3a:	9f 92       	push	r9
 e3c:	af 92       	push	r10
 e3e:	bf 92       	push	r11
 e40:	cf 92       	push	r12
 e42:	df 92       	push	r13
 e44:	ef 92       	push	r14
 e46:	ff 92       	push	r15
 e48:	0f 93       	push	r16
 e4a:	1f 93       	push	r17
 e4c:	cf 93       	push	r28
 e4e:	df 93       	push	r29
 e50:	cd b7       	in	r28, 0x3d	; 61
 e52:	de b7       	in	r29, 0x3e	; 62
 e54:	ca 1b       	sub	r28, r26
 e56:	db 0b       	sbc	r29, r27
 e58:	0f b6       	in	r0, 0x3f	; 63
 e5a:	f8 94       	cli
 e5c:	de bf       	out	0x3e, r29	; 62
 e5e:	0f be       	out	0x3f, r0	; 63
 e60:	cd bf       	out	0x3d, r28	; 61
 e62:	09 94       	ijmp

00000e64 <__epilogue_restores__>:
 e64:	2a 88       	ldd	r2, Y+18	; 0x12
 e66:	39 88       	ldd	r3, Y+17	; 0x11
 e68:	48 88       	ldd	r4, Y+16	; 0x10
 e6a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e6c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e6e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e70:	8c 84       	ldd	r8, Y+12	; 0x0c
 e72:	9b 84       	ldd	r9, Y+11	; 0x0b
 e74:	aa 84       	ldd	r10, Y+10	; 0x0a
 e76:	b9 84       	ldd	r11, Y+9	; 0x09
 e78:	c8 84       	ldd	r12, Y+8	; 0x08
 e7a:	df 80       	ldd	r13, Y+7	; 0x07
 e7c:	ee 80       	ldd	r14, Y+6	; 0x06
 e7e:	fd 80       	ldd	r15, Y+5	; 0x05
 e80:	0c 81       	ldd	r16, Y+4	; 0x04
 e82:	1b 81       	ldd	r17, Y+3	; 0x03
 e84:	aa 81       	ldd	r26, Y+2	; 0x02
 e86:	b9 81       	ldd	r27, Y+1	; 0x01
 e88:	ce 0f       	add	r28, r30
 e8a:	d1 1d       	adc	r29, r1
 e8c:	0f b6       	in	r0, 0x3f	; 63
 e8e:	f8 94       	cli
 e90:	de bf       	out	0x3e, r29	; 62
 e92:	0f be       	out	0x3f, r0	; 63
 e94:	cd bf       	out	0x3d, r28	; 61
 e96:	ed 01       	movw	r28, r26
 e98:	08 95       	ret

00000e9a <_exit>:
 e9a:	f8 94       	cli

00000e9c <__stop_program>:
 e9c:	ff cf       	rjmp	.-2      	; 0xe9c <__stop_program>
